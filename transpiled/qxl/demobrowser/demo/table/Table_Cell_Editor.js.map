{
  "version": 3,
  "sources": [
    "/home/runner/work/qxl.demobrowser/qxl.demobrowser/source/class/qxl/demobrowser/demo/table/Table_Cell_Editor.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "qxl",
    "demobrowser",
    "demo",
    "table",
    "TableDemo",
    "members",
    "getCaption",
    "main",
    "_container",
    "resetWidth",
    "setResizable",
    "createTable",
    "tableData",
    "newValue",
    "search",
    "window",
    "open",
    "propertyCellRendererFactoryFunc",
    "cellInfo",
    "tableModel",
    "getTableModel",
    "rowData",
    "getRowData",
    "row",
    "metaData",
    "renderer",
    "cmd",
    "ui",
    "cellrenderer",
    "Boolean",
    "Password",
    "Replace",
    "replaceMap",
    "forEach",
    "Array",
    "setReplaceMap",
    "addReversedReplaceMap",
    "Default",
    "propertyCellRendererFactory",
    "Dynamic",
    "propertyCellEditorFactoryFunc",
    "cellEditor",
    "celleditor",
    "TextField",
    "validationFunc",
    "editable",
    "ComboBox",
    "SelectBox",
    "setListData",
    "PasswordField",
    "CheckBox",
    "setValidationFunction",
    "oldValue",
    "re",
    "test",
    "alert",
    "RegExp",
    "propertyCellEditorFactory",
    "propertyEditor_tableModel",
    "model",
    "Simple",
    "setColumns",
    "propertyEditor_resizeBehaviour",
    "tableColumnModel",
    "obj",
    "columnmodel",
    "Resize",
    "propertyEditor",
    "Table",
    "setDecorator",
    "setColumnVisibilityButtonVisible",
    "setKeepFirstVisibleRowComplete",
    "setStatusBarVisible",
    "getSelectionModel",
    "setSelectionMode",
    "selection",
    "Model",
    "SINGLE_SELECTION",
    "tcm",
    "getTableColumnModel",
    "setColumnVisible",
    "getBehavior",
    "setWidth",
    "setColumnEditable",
    "setDataCellRenderer",
    "setCellEditorFactory",
    "setData",
    "addListener",
    "event",
    "type",
    "Data",
    "changedData",
    "getData",
    "key",
    "getValue",
    "firstRow",
    "value",
    "firstColumn",
    "info",
    "Table_Cell_Editor"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * Using the Table, qx.ui.table.cellrenderer.Dynamic, qx.ui.table.celleditor.\n * Dynamic, qx.ui.table.celleditor.ComboBox\n * and cell value validation to build a property editor.\n *\n * @tag noPlayground\n */\nqx.Class.define(\"qxl.demobrowser.demo.table.Table_Cell_Editor\",\n{\n  extend : qxl.demobrowser.demo.table.TableDemo,\n\n  members :\n  {\n    getCaption : function() {\n      return \"Property editor table\";\n    },\n\n    main : function()\n    {\n      this.base(arguments);\n\n      this._container.resetWidth();\n      this._container.setResizable(false);\n    },\n\n    /**\n     * @lint ignoreDeprecated(alert)\n     * @return {qx.ui.table.Table} table\n     */\n    createTable : function()\n    {\n      // create some example data\n      var tableData =\n      [\n        [\n          'username',\n          'User Name',\n          'jdoe',\n          {'required':true}\n        ],\n        [\n          'password',\n          'Password',\n          'secret',\n          {\n            'type': 'password',\n            'required': true\n          }\n        ],\n        [\n          'role',\n          'Role',\n          'editable combobox',\n          {\n            'options':\n            [\n              'admin',\n              'manager',\n              'user'\n            ],\n            'editable': true\n          }\n        ],\n        [\n          'status',\n          'Status',\n          '0',\n          {\n            'options':\n            [\n              [\n                'Inactive',\n                null,\n                '0'\n              ],\n              [\n                'Active',\n                null,\n                '1'\n              ],\n              [\n                'Waiting',\n                null,\n                '2'\n              ]\n            ]\n          }\n        ],\n        [\n          'email',\n          'Email',\n          'enter valid email',\n          {\n            'type': 'email'\n          }\n        ],\n        [\n          'telephone',\n          'Telephone',\n          'enter valid telephone number',\n          {\n            'regExp': '[0-9]+',\n            'failMsg': 'Use only numbers!'\n          }\n        ],\n        [\n          'website',\n          'Website',\n          'enter website',\n          {\n            'validationFunc': function(newValue)\n            {\n              if (newValue.search(/^http:/)!=-1)\n              {\n                window.open(newValue);\n              }\n              return newValue;\n            }\n          }\n        ],\n        [\n          'newsletter',\n          'Newsletter',\n          true,\n          {\n            'type': \"checkbox\"\n          }\n        ]\n      ];\n\n      // cell renderer factory function\n      // returns a cell renderer instance\n      var propertyCellRendererFactoryFunc = function (cellInfo)\n      {\n        var table = cellInfo.table;\n        var tableModel = table.getTableModel();\n        var rowData = tableModel.getRowData(cellInfo.row);\n        var metaData = rowData[3];\n        var renderer;\n\n        for ( var cmd in metaData )\n        {\n\n          switch ( cmd )\n          {\n          case \"type\":\n            switch ( metaData['type'])\n            {\n            case \"checkbox\":\n              return new qx.ui.table.cellrenderer.Boolean;\n\n            case \"password\":\n              return new qx.ui.table.cellrenderer.Password;\n            }\n            break;\n\n          case \"options\":\n            var renderer = new qx.ui.table.cellrenderer.Replace;\n            var replaceMap = {};\n            metaData['options'].forEach(function(row){\n            if (row instanceof Array)\n              {\n                replaceMap[row[0]]=row[2];\n              }\n            });\n            renderer.setReplaceMap(replaceMap);\n            renderer.addReversedReplaceMap();\n            return renderer;\n          }\n        }\n        return new qx.ui.table.cellrenderer.Default();\n      }\n\n      // create the  \"meta\" cell renderer object\n      var propertyCellRendererFactory =\n        new qx.ui.table.cellrenderer.Dynamic(propertyCellRendererFactoryFunc);\n\n      // cell editor factory function\n      // returns a cellEditorFactory instance based on data in the row itself\n      var propertyCellEditorFactoryFunc = function (cellInfo)\n      {\n        var table = cellInfo.table;\n        var tableModel = table.getTableModel();\n        var rowData = tableModel.getRowData(cellInfo.row);\n        var metaData = rowData[3];\n        var cellEditor = new qx.ui.table.celleditor.TextField;\n        var validationFunc = null;\n\n        for ( var cmd in metaData )\n        {\n          switch ( cmd )\n          {\n          case \"options\":\n            if (metaData.editable)\n            {\n              cellEditor = new qx.ui.table.celleditor.ComboBox();\n            }\n            else\n            {\n              cellEditor = new qx.ui.table.celleditor.SelectBox();\n            }\n            cellEditor.setListData( metaData['options'] );\n            break;\n\n          case \"editable\":\n            break;\n\n          case \"type\":\n            switch ( metaData['type'] )\n            {\n            case \"password\":\n              cellEditor = new qx.ui.table.celleditor.PasswordField;\n              break;\n\n            case \"checkbox\":\n              cellEditor = new qx.ui.table.celleditor.CheckBox;\n              break;\n\n            case \"email\":\n              cellEditor.setValidationFunction (\n                function( newValue, oldValue )\n                {\n                  var re = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*\\.(\\w{2}|(com|net|org|edu|int|mil|gov|arpa|biz|aero|name|coop|info|pro|museum))$/;\n                  if ( re.test(newValue) )\n                  {\n                    return newValue;\n                  }\n                  alert(\"You did not enter a valid email address\");\n                  return oldValue;\n                });\n              break;\n            }\n            break;\n\n          case \"regExp\":\n            cellEditor.setValidationFunction (\n              function( newValue, oldValue )\n              {\n                var re = new RegExp(metaData['regExp']);\n                if ( re.test(newValue) )\n                {\n                  return newValue;\n                }\n                alert(metaData['failMsg']);\n                return oldValue;\n              });\n            break;\n\n          case \"validationFunc\":\n            cellEditor.setValidationFunction (metaData['validationFunc']);\n            break;\n\n          case \"required\":\n            validationFunc = function( newValue, oldValue )\n            {\n              if (! newValue)\n              {\n                alert(\"You need to supply a value here\");\n                return oldValue;\n              }\n              return newValue;\n            };\n            break;\n          }\n        }\n        return cellEditor;\n      }\n\n      // create a \"meta\" cell editor object\n      var propertyCellEditorFactory =\n        new qx.ui.table.celleditor.Dynamic(propertyCellEditorFactoryFunc);\n\n      // create table\n      var propertyEditor_tableModel = new qx.ui.table.model.Simple();\n      propertyEditor_tableModel.setColumns(\n        [\n          'Property',\n          'Property',\n          'Doubletap on cell to edit value'\n        ]);\n      var propertyEditor_resizeBehaviour =\n        {\n          tableColumnModel : function(obj)\n          {\n            return new qx.ui.table.columnmodel.Resize(obj);\n          }\n        };\n      var propertyEditor = new qx.ui.table.Table(\n        propertyEditor_tableModel,propertyEditor_resizeBehaviour);\n\n      // remove decor\n      propertyEditor.setDecorator(null);\n\n      // layout\n      propertyEditor.setColumnVisibilityButtonVisible(false);\n      propertyEditor.setKeepFirstVisibleRowComplete(true);\n      propertyEditor.setStatusBarVisible(false);\n\n      // selection mode\n      propertyEditor.getSelectionModel().setSelectionMode(\n        qx.ui.table.selection.Model.SINGLE_SELECTION);\n\n      // Get the table column model\n      var tcm = propertyEditor.getTableColumnModel();\n\n      // first table columns is not visible, has the key\n      tcm.setColumnVisible(0,false);\n\n      // second column has the label\n      tcm.getBehavior().setWidth(1,100);\n\n      // third column for editing the value and has special cell renderers\n      // and cell editors\n      tcm.getBehavior().setWidth(2,300);\n      propertyEditor_tableModel.setColumnEditable(2,true);\n      tcm.setDataCellRenderer(2, propertyCellRendererFactory);\n      tcm.setCellEditorFactory(2, propertyCellEditorFactory);\n\n      // fourth column is not visible, has the metadata\n\n      // set data\n      propertyEditor.getTableModel().setData(tableData);\n\n      // create event listener for data change event. this would normally\n      // send the data back to the server etc.\n      propertyEditor.getTableModel().addListener(\n        \"dataChanged\",\n        function(event)\n        {\n          if ( !(event instanceof qx.event.type.Data))\n          {\n            return;\n          }\n          var changedData = event.getData();\n\n          // get changed data\n          var model =\n            this.getTableModel();\n          var key =\n            model.getValue(0,changedData.firstRow);\n          var value =\n            model.getValue(changedData.firstColumn, changedData.firstRow);\n\n          this.info(\"User edited property '\" + key +\n                    \"' and entered value '\" + value +\"'.\");\n        },\n        propertyEditor);\n\n      return propertyEditor;\n    }\n  }\n});\n"
  ]
}